extends CharacterBody3D


const SPEED = 5.0
const JUMP_VELOCITY = 6

var sensitivity = 0.03
var vertical_look_limit = 90
var camera_controller
var camera

func _ready():
	camera_controller = $CameraController
	camera = $CameraController/Camera3D
	Input.set_mouse_mode(Input.MOUSE_MODE_CAPTURED)

func _process(delta):
	var mouse_velocity = Input.get_last_mouse_velocity()
	
	rotate_y(-mouse_velocity.x * sensitivity * delta)
	
	var new_rotation_x = camera_controller.rotation_degrees.x - mouse_velocity.y * sensitivity * delta
	new_rotation_x = clamp(new_rotation_x, -vertical_look_limit, vertical_look_limit)
	camera_controller.rotation_degrees.x = new_rotation_x


# Get the gravity from the project settings to be synced with RigidBody nodes.
var gravity = ProjectSettings.get_setting("physics/3d/default_gravity")


func _physics_process(delta):
	# Add the gravity.
	if not is_on_floor():
		velocity.y -= gravity * delta

	# Handle Jump.
	if Input.is_action_just_pressed("jump") and is_on_floor():
		velocity.y = JUMP_VELOCITY

	# Get the input direction and handle the movement/deceleration.
	# As good practice, you should replace UI actions with custom gameplay actions.
	var input_dir = Input.get_vector("left", "right", "forward", "backward")
	var direction = (transform.basis * Vector3(input_dir.x, 0, input_dir.y)).normalized()
	if direction:
		velocity.x = direction.x * SPEED
		velocity.z = direction.z * SPEED
	else:
		velocity.x = move_toward(velocity.x, 0, SPEED)
		velocity.z = move_toward(velocity.z, 0, SPEED)

	move_and_slide()
